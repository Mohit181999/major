import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

dfb = pd.read_csv(folderpath index_col='Id')
dfm = pd.read_csv(folderpath, index_col='Id')

all_perm_uni = list(dfm.columns)
apps_ben = list(dfb.index)
apps_mal = list(dfm.index)

sorted_inc = []
sorted_dec = []


for k in range(0, 6):
    rank = pd.Series()
    print(k)
    for j in all_perm_uni:
        sumB = 0
        sumM = 0
        for i in apps_ben:
            sumB += dfb.loc[i,j]
        for i in apps_mal:
            sumM += dfm.loc[i,j]
        
         # Use permisssions with support 0%, 5%, 10%, 15%, ..., 25%
        if sumB >= (k)*0.05*len(apps_ben) and sumM >= (k)*0.05*len(apps_mal):
            fB = sumB / len(apps_ben)
            fM = sumM / len(apps_mal)
            rank[j] = (fM - fB)
    
    inc_rank = rank.sort_values()
    dec_rank = rank.sort_values(ascending=False)
    sorted_inc.append(inc_rank)
    sorted_dec.append(dec_rank)
    #df_inc = pd.DataFrame(sorted_inc)
    #df_dec = pd.DataFrame(sorted_dec)
    #df_inc.to_csv(folderpath)
    #df_dec.to_csv(folderpath)
    




accuracy_svm = []
for k in range(0, 6):
    accuracy = []
    idx = list(sorted_inc[k].index)
    print(k)
    #index = list(sorted_dec[k].index)
    #print(index)
    x = 0.0
    i = 1
    while i < len(idx)+1:
        print("i")
        ben = dfb[idx[0:i]]        
        mal = dfm[idx[0:i]]
        #print(idx[0:i])
        yb = pd.Series(np.zeros(len(ben.index)))
        ym = pd.Series(np.ones(len(mal.index)))
        X = pd.concat([ben, mal])
        y = pd.concat([yb, ym])
        #o = pd.DataFrame(X)
        #o.to_csv('o.csv')
        X.fillna(0)
       # print(X)
        # Splitting the dataset into the Training set and Test set
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)
        #print(X_train)
        # Creating and training classifiers
        #classifier1 = RandomForestClassifier(criterion='entropy', random_state = 0)
        #classifier2 = GaussianNB()
        #d = pd.DataFrame(X_train)
        #d.to_csv('d.csv')
        #print(len(X_train))
        #print(len(X_test))
        classifier3 = SVC(kernel='rbf', random_state=0)
        
        #classifier1.fit(X_train, y_train)
        #classifier2.fit(X_train, y_train)
        classifier3.fit(X_train, y_train)

        y_pred = classifier3.predict(X_test)
        #acc = classifier3.score(X_test,y_test)
        a = accuracy_score(y_pred, y_test)
        #print(acc)
        if x < a:
            accuracy.append(a)
            x = a
            i = i+1
        else:
            idx.pop(i-1)
        '''accuracy1.append(accuracy_score(y_pred, y_test))
        y_pred = classifier2.predict(X_test)
        accuracy2.append(accuracy_score(y_pred, y_test))
        y_pred = classifier3.predict(X_test)
        accuracy3.append(accuracy_score(y_pred, y_test))'''
    #print(accuracy)
    #accuracy_rf.append(index)
    #accuracy_nb.append(index)
    accuracy_svm.append(idx)
    
    #accuracy_rf.append(accuracy)
    #accuracy_nb.append(accuracy)
    accuracy_svm.append(accuracy)
    #df_rf = pd.DataFrame(accuracy_rf).transpose();
#df_nb = pd.DataFrame(accuracy_nb).transpose();
df_svm = pd.DataFrame(accuracy_svm).transpose()

#df_rf.to_csv('accuracy_rf_3d.csv');
#df_nb.to_csv('accuracy_nb_3d.csv');
df_svm.to_csv('accuracy_svm_3p.csv')